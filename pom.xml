<?xml version="1.0" encoding="UTF-8"?>
<!-- 定义 XML 声明，指定使用 UTF-8 编码 -->

<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <!-- Maven POM 文件头，声明使用的 XML 命名空间和对应的 XSD 验证 -->

    <modelVersion>4.0.0</modelVersion>
    <!-- POM 模型版本，固定为 4.0.0 -->

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.5.3</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>
    <!--
    指定当前项目继承 Spring Boot 官方的父项目：
    - 自动引入 Spring Boot 依赖版本管理，无需手动写每个依赖版本
    - 自动配置常用插件和默认配置
    -->

    <groupId>com.example</groupId>
    <!-- 项目的组织唯一标识（包名反写），用于在 Maven 仓库中区分项目 -->

    <artifactId>SpringBootDemo</artifactId>
    <!-- 当前项目名称，生成 jar/war 文件时的名称 -->

    <version>0.0.1-SNAPSHOT</version>
    <!-- 当前项目版本号，SNAPSHOT 表示开发中版本 -->

    <name>SpringBootDemo</name>
    <!-- 项目可读性名称 -->

    <description>SpringBootDemo</description>
    <!-- 项目描述 -->

    <url/>
    <!-- 项目主页地址，可留空 -->

    <licenses>
        <license/>
    </licenses>
    <!-- 项目许可证信息，可留空 -->

    <developers>
        <developer/>
    </developers>
    <!-- 开发者信息，可留空 -->

    <scm>
        <connection/>
        <developerConnection/>
        <tag/>
        <url/>
    </scm>
    <!-- 版本控制系统（如 Git）相关信息，可留空 -->

    <properties>
        <java.version>17</java.version>
    </properties>
    <!--
    定义项目使用的 Java 版本（17），Spring Boot 会自动使用此版本编译
    如果本地 JDK 是 17/21 都可以兼容，但应保持一致避免冲突
    -->

    <repositories>
        <repository>
            <id>aliyun</id>
            <url>https://maven.aliyun.com/repository/public</url>
        </repository>
    </repositories>


    <dependencies>
        <!-- 项目所需依赖 -->

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>
        <!--
        引入 Spring Boot Data JPA，用于简化数据库 ORM 持久化操作
        -->

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <!--
        引入 Spring Boot Web Starter，包含：
        - Spring MVC
        - Tomcat（嵌入式）
        - JSON 解析等
        用于开发 RESTful Web 服务
        -->

        <dependency>
            <groupId>com.mysql</groupId>
            <artifactId>mysql-connector-j</artifactId>
            <scope>runtime</scope>
        </dependency>
        <!--
        引入 MySQL 驱动，用于连接数据库
        仅在运行时需要（scope=runtime）
        -->

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
        <!--
        引入 Spring Boot 测试 Starter：
        包含 JUnit、Mockito、Spring Test 等常用测试工具
        仅在测试时使用（scope=test）
        -->

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-validation</artifactId>
        </dependency>

    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>
    <!--
    构建配置：
    配置 spring-boot-maven-plugin 插件，使 Maven 能直接：
    - 打包可运行的 jar（包含依赖和嵌入式 Tomcat）
    - 使用 `mvn spring-boot:run` 启动项目
    -->

</project>